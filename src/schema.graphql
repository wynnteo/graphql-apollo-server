type User {
  id: ID!
  name: String!
  email: String!  # Sensitive field (will be secured later)
  posts(limit: Int = 10, offset: Int = 0): [Post!]!
}

type Post {
  id: ID!
  title: String!
  content: String!
  author: User!
}

input CreatePostInput {
  title: String!
  content: String!
  authorId: ID!
}

input RegisterInput {
  name: String!
  email: String!
  password: String!
}

type AuthPayload {
  token: String!
  user: User!
}

type Query {
  getUser(id: ID!): User
  getPosts(limit: Int = 10, offset: Int = 0): [Post!]!
}

type Mutation {
  register(input: RegisterInput!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createPost(input: CreatePostInput!): Post!
  deletePost(id: ID!): Boolean!
}

type Subscription {
  postAdded: Post!
}
